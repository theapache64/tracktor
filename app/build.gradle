plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
    id "org.jetbrains.kotlin.plugin.allopen" version "$kotlin_version"
}

allOpen {
    annotation("com.theapache64.tracktor.utils.test.OpenForTesting")
}

android {
    compileSdkVersion compile_sdk_version
    defaultConfig {
        applicationId "com.theapache64.tracktor"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode 10001
        versionName "1.0.0-alpha01"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        String resourceDir = 'src/sharedTest/resources'
        test {
            java.srcDir sharedTestDir
            res.srcDirs resourceDir
        }
        androidTest {
            java.srcDir sharedTestDir
            res.srcDirs resourceDir
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues true
        }
    }
}

dependencies {

    //Core
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.core:core-ktx:$ktx_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_version"
    implementation "com.google.android.material:material:$material_version"

    // Coroutines
    def coroutines_version = '1.3.5'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

    // Lifecycle extension
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // Dagger 2
    def dagger_version = '2.27'
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"


    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.0'
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

    // Moshi
    implementation 'com.squareup.moshi:moshi:1.9.2'


    // MaterialColors
    implementation 'com.theah64.materialcolors:materialcolors:1.0.0'

    // TwinKill
    def twinkill_version = '1.1.0-alpha05'
    implementation("com.theapache64.twinkill:core:$twinkill_version")
    implementation "com.theapache64.twinkill:logger:$twinkill_version"
    implementation "com.theapache64.twinkill:network:$twinkill_version"
    implementation "com.theapache64.twinkill:google_sans:$twinkill_version"

    // Room
    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Input Dialog
    implementation 'com.afollestad.material-dialogs:input:3.3.0'


    // Unit Test
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation('com.winterbe:expekt:0.5.0') {
        exclude group: "org.jetbrains.kotlin"
    }
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "androidx.test.ext:junit:1.1.1"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "org.robolectric:robolectric:4.3.1"
    testImplementation "com.theapache64.twinkill:core:$twinkill_version"
    testImplementation "com.theapache64.twinkill:test:$twinkill_version"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation 'io.github.inflationx:viewpump:2.0.3' // for robolectric
    testImplementation 'io.github.inflationx:calligraphy3:3.1.1' // for robolectric
    implementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"



    // Instrumentation test
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation "com.theapache64.twinkill:test:$twinkill_version"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    androidTestImplementation('com.schibsted.spain:barista:3.4.0') {
        exclude group: 'org.jetbrains.kotlin'
    }
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation "com.theapache64.twinkill:test:$twinkill_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    androidTestImplementation 'com.github.fabioCollini.daggermock:daggermock:0.8.5'
    androidTestImplementation 'com.github.fabioCollini.daggermock:daggermock-kotlin:0.8.5'
    androidTestImplementation('com.winterbe:expekt:0.5.0') {
        exclude group: "org.jetbrains.kotlin"
    }

}
